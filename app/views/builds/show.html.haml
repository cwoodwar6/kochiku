= content_for :title do
  = @build.ref[0, 7]
  &ndash;
  = @build.repository.name
= content_for :favicon do
  = favicon_link_tag image_path("#{@build.to_color}.png"), :type => 'image/png'

%h2.subheader
  = @build.repository.name
  &ndash;
  = link_to(@build.branch_record.name, repository_branch_path(@build.repository, @build.branch_record))
  &ndash;
  %code.build-status{class: @build.state, title: @build.ref}
    = @build.ref[0, 7]
  %a.info{:href => show_link_to_commit(@build.repository, @build.ref)}
    Show
  - if @build.branch_record.convergence?
    %a.info{:href => show_link_to_compare(@build, @build.previous_successful_build.try(:ref), @build.ref), :title => 'show changes since last green build'}
      Compare to last green build

  .actions
    - if @build.succeeded?
      = button_to "Sync status to #{@build.repository.scm_type}", resend_status_repository_build_path(@build.repository, @build), :method => :post
    - if @build.repository.allows_kochiku_merges?
      %form{action: toggle_merge_on_success_repository_build_path(@build.repository, @build), method: :post}
        %label
          = check_box_tag :merge_on_success, true, @build.merge_on_success_enabled?, disabled: !eligible_for_merge_on_success?(@build), onchange: 'this.form.submit()'
          Merge on Success

    %label
      = check_box_tag :refresh, true, @build.is_running?
      Refresh

.build-info.build-info-subheader
  - if @build.succeeded? && !@build.branch_record.convergence?
    %a.info{:href => show_link_to_create_pull_request(@build), :title => 'create a pull request against master'}
      Create pull request
  %span.info
    Created
    = timeago(@build.created_at)
  %span.info
    Updated
    = timeago(@build.updated_at, :id => "time-since-update")
  - if @build.completed?
    %span.info
      Built in #{duration_strftime(@build.elapsed_time, "%Hh %Mm %Ss")}
  - if @build.completed? && @build.failed? && @build.build_parts.present?
    %span.info
      #{@build.build_parts.failed.count} out of #{@build.build_parts.count} build parts failed
  - if @build.is_running?
    %span.info
      = button_to "Abort Build", abort_repository_build_path(@build.repository, @build), method: :patch, class: "abort-build"
  - if @repository.enabled? && (@build.failed? || @build.aborted?)
    %span.info
      - if @build.build_parts.empty? || !@build.error_details.empty?
        = button_to "Retry Partitioning", retry_partitioning_repository_build_path(@build.repository, @build), :method => :post, :form_class => "retry-partitioning"
      - else
        = button_to "Rebuild failed parts", rebuild_failed_parts_repository_build_path(@build.repository, @build), :method => :post, :form_class => "rebuild-parts"

- if @build.error_details.present?
  .build-error
    %h2 Build error
    %pre= [@build.error_details[:message], @build.error_details[:backtrace]].join("\n")
- if @build.succeeded? && @build.build_parts.count == 0
  .build-empty
    %h2 Build Empty
    %span.info
      Partitioner did not return any work for this build.
%table.build-summary#build-summary
  %thead
    %tr
      %th.right.id Part
      %th.status Status
      %th.queue-position Position
      - display_ruby_version = multiple_ruby_versions?(@build)
      - build_metadata_headers(@build, display_ruby_version).each do |header|
        %th{class: header.downcase.gsub(/\W+/, '-')}= header
      %th.type Type
      %th.right.worker Worker
      %th.right.time Elapsed Time
      %th.right.count Attempt
      %th.right.actions Actions
  %tbody
    - @build.build_parts.decorate.each do |part|
      = render partial: 'builds/build_parts', locals: {part: part, build: @build, build_parts_position: @build_parts_position, repository: @repository}

- if @build.on_success_script_log_file.url
  = link_to(File.basename(@build.on_success_script_log_file.path), @build.on_success_script_log_file.url)
= content_for :javascript do
  :javascript
    if ($('#build-summary tbody tr').length > 0) {
      $('#build-summary').tablesorter({ sortList: [ [1, 0] ] });
      StartTimes = #{
        # rubocop:disable Style/IndentationConsistency
        start_times = {}
        @build.build_parts.each { |part| start_times[part.id] = part.started_at }
        start_times.to_json
      };
    }

    if ( "Notification" in window && Notification.permission == "default") {
      Notification.requestPermission();
    }

    Kochiku.buildInfo = {table: '.build-summary tbody', renderTime: Date.parse(#{raw @build.updated_at.to_json}), state: "#{@build.state}"};
    Kochiku.buildInfo.id = #{@build.id};
    Kochiku.buildInfo.branch = "#{@build.branch_record.name}";
    Kochiku.buildInfo.repo = "#{@build.repository.name}";

    Kochiku.terminalStates = #{raw Build::TERMINAL_STATES};
    Kochiku.delayedRefresh(Kochiku.buildInfo);
    Kochiku.doneMessage = "Build on "

    $('abbr.timeago').click(function() {
      // swap the relative time with the absolute time
      var originalText = $(this).text();
      $(this).text($(this).attr('title'));
      $(this).attr('title', originalText);
    });
